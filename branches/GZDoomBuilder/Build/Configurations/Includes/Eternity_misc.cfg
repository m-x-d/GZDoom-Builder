linedefflags
{
    1024 = "3D middle texture";
}

thingflags
{
	128 = "Friendly";
	512 = "Dormant";
}

/*
ADDITIONAL UNIVERSAL DOOM MAP FORMAT FIELD DEFINITIONS
Only add fields here that Doom Builder does not edit with its own user-interface!
The "default" field must match the UDMF specifications!

Field data types:
0 = integer *
1 = float
2 = string
3 = bool
4 = linedef action (integer) *
5 = sector effect (integer) *
6 = texture (string)
7 = flat (string)
8 = angle in degrees (integer)
9 = angle in radians (float)
10 = XXRRGGBB color (integer)
11 = enum option (integer) *
12 = enum bits (integer) *
13 = sector tag (integer) *
14 = thing tag (integer) *
15 = linedef tag (integer) *
16 = enum option (string)
17 = angle in degrees (float)
22 = byte angle (integer)
*/
universalfields
{
	linedef
	{
		comment
		{
			type = 2;
			default = "";
		}
	}
	
	sidedef
	{
		comment
		{
			type = 2;
			default = "";
		}
	}
	
	thing
	{
		comment
		{
			type = 2;
			default = "";
		}
	}
	
	sector
	{
		comment
		{
			type = 2;
			default = "";
		}
	}
}

defaultthingflags_udmf
{
	skill1;
	skill2;
	skill3;
	skill4;
	skill5;
	single;
	coop;
	dm;
	class1;
	class2;
	class3;
}

doormaking_udmf
{
	makedooraction = 12;	// See linedeftypes
	makedoorflags { playeruse; repeatspecial; }
	makedoorarg0 = 0;
	makedoorarg1 = 16;
	makedoorarg2 = 150;
	makedoorarg3 = 0;
	makedoorarg4 = 0;
}

sectorflags_udmf
{
	secret = "Secret";
	lightfloorabsolute = "Floor light setting is absolute";
	lightceilingabsolute = "Ceiling light setting is absolute";
	damage_endgodmode = "Damage disables god mode cheat";
	damage_exitlevel = "Damage and exit level when < 10%";
	damageterraineffect = "Spawn terrain splashes on damage";
	portal_ceil_disabled = "Disable ceiling portal";
	portal_ceil_norender = "Don't display ceiling portal";
	portal_ceil_nopass = "Blocking ceiling linked portal";
	portal_ceil_blocksound = "Ceiling linked portal blocks sound";
	portal_ceil_useglobaltex = "Ceiling portal uses global texture";
	portal_floor_disabled = "Disable floor portal";
	portal_floor_norender = "Don't display floor portal";
	portal_floor_nopass = "Blocking floor linked portal";
	portal_floor_blocksound = "Floor portal blocks sound";
	portal_floor_useglobaltex = "Floor portal uses global texture";
}

// These are instead of Doom sector types in UDMF and Hexen format
sectors_udmf
{
	0 = "None";
	1 = "Light Phased";
	2 = "Light Sequence Start";
	3 = "Light Sequence Special 1";
	4 = "Light Sequence Special 2";
	40 = "Wind East weak";
	41 = "Wind East medium";
	42 = "Wind East strong";
	43 = "Wind North weak";
	44 = "Wind North medium";
	45 = "Wind North strong";
	46 = "Wind South weak";
	47 = "Wind South medium";
	48 = "Wind South strong";
	49 = "Wind West weak";
	50 = "Wind West medium";
	51 = "Wind West strong";
	65 = "Light Flicker";
	66 = "Light Strobe Fast";
	67 = "Light Strobe Slow";
	68 = "Light Strobe Hurt -20% health";
	69 = "Damage Hellslime -10% health";
	71 = "Damage Nukage -5% health";
	72 = "Light Glow";
	74 = "Sector Door Close (30 sec)";
	75 = "Damage End Level -20% health";
	76 = "Light StrobeSlowSync";
	77 = "Light StrobeFastSync";
	78 = "Sector Door Raise (5 min)";
	79 = "Low Friction";
	80 = "Damage Super Hellslime -20% health";
	81 = "Light Fire Flicker";
	82 = "Damage -5% health (no protection)";
	83 = "Damage -8% health (no protection)";
	84 = "Scroll east + -2 or -5% health (no protection)";
	85 = "Damage Sludge -4% health";
	225 = "Carry East Slow";
	226 = "Carry East Med.Slow";
	227 = "Carry East Medium";
	228 = "Carry East Med.Fast";
	229 = "Carry East Fast";
	230 = "Carry North Slow";
	231 = "Carry North Med.Slow";
	232 = "Carry North Medium";
	233 = "Carry North Med.Fast";
	234 = "Carry North Fast";
	235 = "Carry South Slow";
	236 = "Carry South Med.Slow";
	237 = "Carry South Medium";
	238 = "Carry South Med.Fast";
	239 = "Carry South Fast";
	240 = "Carry West Slow";
	241 = "Carry West Med.Slow";
	242 = "Carry West Medium";
	243 = "Carry West Med.Fast";
	244 = "Carry West Fast";
}

linedefflags_udmf
{
	twosided = "Doublesided";
	dontpegtop = "Upper unpegged";
	dontpegbottom = "Lower unpegged";
	blocking = "Impassable";
	blockeverything = "Block everything"; 
	blockmonsters = "Block monsters";
	blocksound = "Block sound";
	jumpover = "Jump-over railing";
	clipmidtex = "Clip middle texture";
	midtex3d = "Walkable middle texture";
	midtex3dimpassible = "Projectile shoot-through middle texture";
	mapped = "Initially shown on map";
	secret = "Shown as 1-sided on map";
	dontdraw = "Not shown on map";
	translucent = "Translucent (obsolete)";
	zoneboundary = "Sound zone boundary";
}

linedefactivations_udmf
{
	repeatspecial = "Repeatable action";
	playeruse = "When player presses use";
	playercross = "When player walks over";
	playerpush = "When player bumps";
	monsteruse = "When monster presses use";
	monstercross = "When monster walks over";
	monsterpush = "When monsters bumps";
	missilecross = "When projectile crosses";
	impact = "On projectile impact";
	passuse = "Pass use on";
	firstsideonly = "Front side only";
}

sidedefflags
{

}

// Basic UDMF stuff.
thingflags_udmf
{
	skill1 = "Skill 1";
	skill2 = "Skill 2";
	skill3 = "Skill 3";
	skill4 = "Skill 4";
	skill5 = "Skill 5";
	single = "Singleplayer";
	coop = "Cooperative";
	dm = "Deathmatch";
	friend = "Friendly (MBF logic)";
	strifeally = "Friendly (Strife logic)";
	ambush = "Ambush players";
	standing = "Stand still";
	dormant = "Dormant";
	translucent = "Translucent (25%)";
	invisible = "Invisible";
}

// How thing flags should be compared (for the stuck thing error check)
thingflagscompare_udmf
{
	skills
	{
		skill1;
		skill2;
		skill3;
		skill4;
		skill5;
	}

	gamemodes
	{
		single { requiredgroups = "skills"; }
		coop   { requiredgroups = "skills"; }
		dm      { ignoredgroups = "skills"; }
	}

	classes
	{
		class1;
		class2;
		class3;
	}
}

linedefs_eternity_udmf
{
	polyobj
	{
		title = "Polyobjects";
		
		59
		{
			title = "Polyobject Move to Spot (override)";
			id = "Polyobj_OR_MoveToSpot";
			arg0
			{
				title = "Polyobject Number";
				type = 25;
			}
			arg1
			{
				title = "Speed (mu. per octic)";
				type = 11;
				enum = "stair_speeds";
				default = 16;
			}
			arg2
			{
				title = "Target MapSpot Tag";
				type = 14;
				targetclasses = "MapSpot,MapSpotGravity";
			}
		}
		86
		{
			title = "Polyobject Move to Spot";
			id = "Polyobj_MoveToSpot";
			arg0
			{
				title = "Polyobject Number";
				type = 25;
			}
			arg1
			{
				title = "Speed (mu. per octic)";
				type = 11;
				enum = "stair_speeds";
				default = 16;
			}
			arg2
			{
				title = "Target MapSpot Tag";
				type = 14;
				targetclasses = "MapSpot,MapSpotGravity";
			}
		}
		87
		{
			title = "Polyobject Stop";
			id = "Polyobj_Stop";
			arg0
			{
				title = "Polyobject Number";
				type = 25;
			}
		}
		88
		{
			title = "Polyobject Move to";
			id = "Polyobj_MoveTo";
			arg0
			{
				title = "Polyobject Number";
				type = 25;
			}
			arg1
			{
				title = "Speed (mu. per octic)";
				type = 11;
				enum = "stair_speeds";
				default = 16;
			}
			arg2
			{
				title = "Target X Pos";
			}
			arg3
			{
				title = "Target Y Pos";
			}
		}
		89
		{
			title = "Polyobject Move to (override)";
			id = "Polyobj_OR_MoveTo";
			arg0
			{
				title = "Polyobject Number";
				type = 25;
			}
			arg1
			{
				title = "Speed (mu. per octic)";
				type = 11;
				enum = "stair_speeds";
				default = 16;
			}
			arg2
			{
				title = "Target X Pos";
			}
			arg3
			{
				title = "Target Y Pos";
			}
		}
	}

	line
	{
		title = "Line";
		
		9
		{
			title = "Line Horizon";
			id = "Line_Horizon";
			requiresactivation = false;
		}	
		121	// Line Identification
		{
			arg1
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Sound zone boundary";
					2 = "Jump-over railing";
					4 = "Block floating monsters";
					8 = "Clip middle texture";
					16 = "Wrap middle texture";
					32 = "Walkable middle texture";
					64 = "Switch height check";
					128 = "Front side only";
				}
			}
			arg4
			{
				title = "Line ID High";
			}
		}
		182
		{
			title = "Line Mirror";
			id = "Line_Mirror";
			requiresactivation = false;
		}
		156
		{
			title = "Line Set Portal";
			id = "Line_SetPortal";
			requiresactivation = false;
			
			arg0
			{
				title = "Exit Line Tag";
				tooltip = "The tag number of the line that will act as the \"exit\" of the current portal";
				type = 15;
			}
			arg2
			{
				title = "Portal Type";
				type = 11;
				enum
				{
					0 = "Visual only";
					1 = "Visual + simple teleporter";
					2 = "Interactive";
					3 = "Static (Eternity style)";
				}
			}
			arg3
			{
				title = "Plane Align";
				tooltip = "Determines how the planes at the other side of the portal are relative to this line";
				type = 11;
				enum
				{
					0 = "None";
					1 = "Floors";
					2 = "Ceilings";
				}
			}
		}
		107
		{
			title = "Line Set Portal Target";
			id = "Line_SetPortalTarget";
			
			arg0
			{
				title = "Source Line Tag";
				type = 15;
			}
			arg1
			{
				title = "Target Line Tag";
				type = 15;
			}
		}
	}

	door
	{
		14
		{
			title = "Door Animated";
			id = "Door_Animated";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Animation Speed";
				type = 11;
				enum = "door_speeds";
				default = 16;
			}
			arg2
			{
				title = "Close Delay";
				type = 11;
				enum = "reset_tics";
				default = 150;
			}
			arg3
			{
				title = "Lock";
				type = 11;
				enum = "keys";
			}
		}
		202
		{
			title = "Door Generic";
			id = "Generic_Door";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "flat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Type";
				type = 26;
				enum
				{
					0 = "Open Close";
					1 = "Open Stay";
					2 = "Close Open";
					3 = "Close Stay";
				}
				flags
				{
					64 = "No retrigger";
					128 = "Tag is light tag";
				}
			}
			arg3
			{
				title = "Delay";
				type = 11;
				enum = "generic_door_delays";
				default = 34;
			}
			arg4
			{
				title = "Lock";
				type = 11;
				enum = "keys";
			}
		}
		
		249
		{
			title = "Door Close Wait Open";
			id = "Door_CloseWaitOpen";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "flat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Delay";
				type = 11;
				enum = "generic_door_delays";
				default = 34;
			}
			arg3
			{
				title = "Light Tag";
				type = 13;
			}
		}
	}

	autosave
	{
		title = "Autosave";
		
		15
		{
			title = "Autosave";
			id = "Autosave";
		}
	}

	floor
	{
		28	// Floor Crusher Start
		{
			arg3
			{
				title = "Crush Mode";
				type = 11;
				enum = "crush_mode";
			}
		}
		37
		{
			title = "Floor Move to Value";
			id = "Floor_MoveToValue";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Target Height";
			}
			arg3
			{
				title = "Negative Height";
				type = 11;
				enum = "noyes";
			}
		}
		
		138
		{
			title = "Floor Waggle";
			id = "Floor_Waggle";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Amplitude";
			}
			arg2
			{
				title = "Frequency";
			}
			arg3
			{
				title = "Phase Offset (0-63)";
			}
			arg4
			{
				title = "Duration";
				type = 11;
				enum = "delay_seconds";
				default = 5;
			}
		}
		
		200
		{
			title = "Floor Generic Change";
			id = "Generic_Floor";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Movement Amount";
			}
			arg3
			{
				title = "Target";
				type = 11;
				enum
				{
					0 = "Move by Movement Amount";
					1 = "Highest neighboring floor";
					2 = "Lowest neighboring floor";
					3 = "Nearest neighboring floor";
					4 = "Lowest neighboring ceiling";
					5 = "Sector ceiling";
					6 = "Move by the height of sector's shortest lower texture";
				}
			}
			arg4
			{
				title = "Flags";
				type = 26;
				enum
				{
					0 = "Don't copy anything";
					1 = "Copy floor texture, remove sector special";
					2 = "Copy floor texture";
					3 = "Copy floor texture and special";
				}
				flags
				{
					4 = "Use numeric model if set, trigger model if not";
					8 = "Raise floor if set, lower it if not";
					16 = "Inflict crushing damage";
				}
			}
		}
		
		235
		{
			title = "Transfer Floor Texture and Special form Back Side";
			id = "Floor_TransferTrigger";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
		}
		236
		{
			title = "Transfer Floor Texture and Special using Numeric Change Model";
			id = "Floor_TransferNumeric";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
		}
		238
		{
			title = "Floor Raise to Lowest Ceiling";
			id = "Floor_RaiseToLowestCeiling";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
		}
		239
		{
			title = "Floor Raise by TxTy";
			id = "Floor_RaiseByValueTxTy";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Raise by";
			}
		}
		
		240
		{
			title = "Floor Raise by Texture";
			id = "Floor_RaiseByTexture";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
		}
		
		241
		{
			title = "Floor Lower to Lowest TxTy";
			id = "Floor_LowerToLowestTxTy";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
		}
		
		242
		{
			title = "Floor Lower to Highest Floor";
			id = "Floor_LowerToHighest";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Adjust Target Height";
			}
			arg3
			{
				title = "Force Adjust";
				type = 11;
				enum = "noyes";
			}
		}
		250
		{
			title = "Floor Donut";
			id = "Floor_Donut";
			
			arg0
			{
				title = "Center Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Pillar Lower Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Stairs Raise Speed";
				type = 11;
				enum = "stair_speeds";
				default = 4;
			}
		}
		
		251
		{
			title = "Floor and Ceiling Lower and Raise";
			id = "FloorAndCeiling_LowerRaise";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Floor Lowering Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Ceiling Raising Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg3
			{
				title = "Emulate Boom Bug";
				type = 11;
				enum
				{
					0 = "No";
					1998 = "Yes";
				}
			}
		}
	}

	stairs
	{
		204
		{
			title = "Stairs Generic Build";
			id = "Generic_Stairs";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "stair_speeds";
				default = 4;
			}
			arg2
			{
				title = "Step Height";
			}
			arg3
			{
				title = "Options";
				type = 12;
				enum
				{
					1 = "Upwards";
					2 = "Ignore Floor Texture";
				}
			}
			arg4
			{
				title = "Reset Delay";
				type = 11;
				enum = "reset_tics";
			}
		}
		
		217
		{
			title = "Stairs Build up (Doom mode)";
			id = "Stairs_BuildUpDoom";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "stair_speeds";
				default = 4;
			}
			arg2
			{
				title = "Step Height";
			}
			arg3
			{
				title = "Build Step Delay";
				type = 11;
				enum = "delay_tics";
				default = 35;
			}
			arg4
			{
				title = "Reset Delay";
				type = 11;
				enum = "reset_tics";
			}
		}
	}


	pillar
	{
		94	// Pillar_BuildAndCrush
		{
			arg3
			{
				title = "Crush Damage";
				default = 100;
			}
			arg4
			{
				title = "Crush Mode";
				type = 11;
				enum = "crush_mode";
			}
		}
	}


	forcefield
	{
		title = "Forcefield";
		
		33
		{
			title = "Forcefield Set";
			id = "ForceField";
			requiresactivation = false;
		}
		34
		{
			title = "Forcefield Remove";
			id = "ClearForceField";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
		}
	}


	ceiling
	{
		title = "Ceiling";
		
		38
		{
			title = "Ceiling Waggle";
			id = "Ceiling_Waggle";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Amplitude (in 1/8 mu.)";
				default = 128;
			}
			arg2
			{
				title = "Frequency";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg3
			{
				title = "Phase Offset (0-63)";
			}
			arg4
			{
				title = "Duration";
				type = 11;
				enum = "delay_seconds";
				default = 5;
			}
		}
		42	// Ceiling Crusher Start
		{
			arg3
			{
				title = "Crush Mode";
				type = 11;
				enum = "crush_mode";
			}
		}
		43	// Ceiling Crush Once
		{
			arg3
			{
				title = "Crush Mode";
				type = 11;
				enum = "crush_mode";
			}
			
		}
		
		97
		{
			title = "Ceiling Lower And Crush Dist";
			id = "Ceiling_LowerAndCrushDist";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
		
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
				
			}
		
			arg2
			{
				title = "Crush Damage";
				default = 100;
			}
		
			arg3
			{
				title = "Lip";
			}
		
			arg4
			{
				title = "Crush Mode";
				type = 11;
				enum = "crush_mode";
			}
		}
		
		104
		{
			title = "Ceiling Crush And Raise Dist";
			id = "Ceiling_CrushAndRaiseSilentDist";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
		
			arg1
			{
				title = "Lip";
			}
		
			arg2
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
		
			arg3
			{
				title = "Crush Damage";
				default = 100;
			}
		
			arg4
			{
				title = "Crush Mode";
				type = 11;
				enum = "crush_mode";
			}
		}

		45	// Ceiling Crush Once and Open
		{
			arg3
			{
				title = "Crush Mode";
				type = 11;
				enum = "crush_mode";
			}
			
		}
		47
		{
			title = "Ceiling Move to Value";
			id = "Ceiling_MoveToValue";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Target Height";
			}
			arg3
			{
				title = "Negative Height";
				type = 11;
				enum = "noyes";
			}
		}
		169
		{
			title = "Ceiling Generic Crush (Hexen mode)";
			id = "Generic_Crusher2";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Lower Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Raise Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg3
			{
				title = "Silent";
				type = 11;
				enum = "noyes";
			}
			arg4
			{
				title = "Crush Damage";
				default = 100;
			}
		}
		192
		{
			title = "Ceiling Lower to Highest Floor";
			id = "Ceiling_LowerToHighestFloor";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
		}
		193
		{
			title = "Ceiling Lower Instantly by Value * 8";
			id = "Ceiling_LowerInstant";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg2
			{
				title = "Lower by (* 8)";
			}
		}
		194
		{
			title = "Ceiling Raise Instantly by Value * 8";
			id = "Ceiling_RaiseInstant";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg2
			{
				title = "Raise by (* 8)";
			}
		}
		195
		{
			title = "Ceiling Crush Once and Open A";
			id = "Ceiling_CrushRaiseAndStayA";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Lower Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Raise Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg3
			{
				title = "Crush Damage";
				default = 100;
			}
			arg4
			{
				title = "Crush Mode";
				type = 11;
				enum = "crush_mode";
			}
			
		}
		196
		{
			title = "Ceiling Crush Start A";
			id = "Ceiling_CrushAndRaiseA";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Lower Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Raise Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg3
			{
				title = "Crush Damage";
				default = 100;
			}
			arg4
			{
				title = "Crush Mode";
				type = 11;
				enum = "crush_mode";
			}
			
		}
		197
		{
			title = "Ceiling Crush Start A (silent)";
			id = "Ceiling_CrushAndRaiseSilentA";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Lower Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Raise Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg3
			{
				title = "Crush Damage";
				default = 100;
			}
			arg4
			{
				title = "Crush Mode";
				type = 11;
				enum = "crush_mode";
			}
			
		}
		198
		{
			title = "Ceiling Raise by Value * 8";
			id = "Ceiling_RaiseByValueTimes8";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Raise by (* 8)";
			}
		}
		199
		{
			title = "Ceiling Lower by Value * 8";
			id = "Ceiling_LowerByValueTimes8";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Lower by (* 8)";
			}
		}
		
		201
		{
			title = "Ceiling Generic Change";
			id = "Generic_Ceiling";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Movement Amount";
			}
			arg3
			{
				title = "Target";
				type = 11;
				enum
				{
					0 = "Move by Movement Amount";
					1 = "Highest neighboring ceiling";
					2 = "Lowest neighboring ceiling";
					3 = "Nearest neighboring ceiling";
					4 = "Highest neighboring floor";
					5 = "Sector floor";
					6 = "Move by the height of sector's shortest upper texture";
				}
			}
			arg4
			{
				title = "Flags";
				type = 26;
				enum
				{
					0 = "Don't copy anything";
					1 = "Copy ceiling texture, remove sector special";
					2 = "Copy ceiling texture";
					3 = "Copy ceiling texture and special";
				}
				flags
				{
					4 = "Use numeric model if set, trigger model if not";
					8 = "Raise ceiling if set, lower it if not";
					16 = "Inflict crushing damage";
				}
			}
		}
		205
		{
			title = "Ceiling Generic Crush (Doom mode)";
			id = "Generic_Crusher";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Lowering Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Raising Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg3
			{
				title = "Silent";
				type = 11;
				enum = "noyes";
			}
			arg4
			{
				title = "Crush Damage";
				default = 100;
			}
		}
		252
		{
			title = "Ceiling Raise to Nearest Ceiling";
			id = "Ceiling_RaiseToNearest";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
		}
		253
		{
			title = "Ceiling Lower to Lowest Ceiling";
			id = "Ceiling_LowerToLowest";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
		}
		254
		{
			title = "Ceiling Lower to Floor";
			id = "Ceiling_LowerToFloor";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
		}
		255
		{
			title = "Ceiling Crush Once and Open A (silent)";
			id = "Ceiling_CrushRaiseAndStaySilA";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Lowering Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Raising Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg3
			{
				title = "Crush Damage";
				default = 100;
			}
			arg4
			{
				title = "Crush Mode";
				type = 11;
				enum = "crush_mode";
			}
		}
	}

	breakable
	{
		title = "Breakable";
		
		49
		{
			title = "Breakable Glass";
			id = "GlassBreak";
			
			arg0
			{
				title = "Spawn Glass Shards";
				type = 11;
				enum = "yesno";
			}
		}
	}

	transfer
	{
		title = "Transfer";
		
		50
		{
			title = "Transfer Brightness Level";
			id = "ExtraFloor_LightOnly";
			requiresactivation = false;
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Options";
				type = 11;
				enum
				{
					0 = "From control sector's ceiling down to the top of another type 0 light";
					1 = "From control sector's ceiling down to control sector's floor";
					2 = "From control sector's ceiling down to the top of another extra light";
				}
			}
		}
		209
		{
			title = "Transfer Heights";
			id = "Transfer_Heights";
			requiresactivation = false;
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Options";
				type = 12;
				enum
				{
					0 = "Boom mode";
					1 = "Use fake ceiling/floor";
					2 = "Draw fake floor only";
					4 = "Inside sector only";
					8 = "Swimmable below fake";
					16 = "Do not draw";
					32 = "Keep lighting";
				}
			}
		}
		
		210
		{
			title = "Transfer Floor Brightness";
			id = "Transfer_FloorLight";
			requiresactivation = false;
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
		}
		211
		{
			title = "Transfer Ceiling Brightness";
			id = "Transfer_CeilingLight";
			requiresactivation = false;
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
		}
		16
		{
			title = "Transfer Wall Brightness";
			id = "Transfer_WallLight";
			requiresactivation = false;
			
			arg0
			{
				title = "Line Tag";
				type = 15;
			}
			arg1
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Transfer light level to front side";
					2 = "Transfer light level to back side";
					4 = "Ignore fake contrast";
				}
			}
		}
		
	}

	platform
	{
		172
		{
			title = "Platform Raise to Nearest Wait Lower";
			id = "Plat_UpNearestWaitDownStay";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Reverse Delay (tics)";
				type = 11;
				enum = "delay_tics";
				default = 35;
			}
		}
		203
		{
			title = "Platform Generic Change";
			id = "Generic_Lift";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Reverse Delay (tics)";
				type = 11;
				enum = "delay_tics";
				default = 35;
			}
			arg3
			{
				title = "Type";
				type = 11;
				enum = "generic_lift_types";
			}
			arg4
			{
				title = "Movement Amount";
			}
		}
		206
		{
			title = "Platform Lower Wait Raise (lip)";
			id = "Plat_DownWaitUpStayLip";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Reverse Delay (tics)";
				type = 11;
				enum = "delay_tics";
				default = 35;
			}
			arg3
			{
				title = "Lip Amount";
			}
			arg4
			{
				title = "Sound Type";
				type = 11;
				enum = "plat_sound";
			}
		}
		207
		{
			title = "Platform Perpetual Move (lip)";
			id = "Plat_PerpetualRaiseLip";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Reverse Delay (tics)";
				type = 11;
				enum = "delay_tics";
				default = 35;
			}
			arg3
			{
				title = "Lip Amount";
			}
		}
		228
		{
			title = "Platform Raise Tx0";
			id = "Plat_RaiseAndStayTx0";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Lockout Mode";
				type = 11;
				enum
				{
					0 = "Lockout in Heretic only";
					1 = "Don't lockout";
					2 = "Lockout in all games";
				}
			}
		}
		230
		{
			title = "Platform Raise by Value Tx (* 8)";
			id = "Plat_UpByValueStayTx";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
			arg2
			{
				title = "Raise by (* 8)";
			}
		}
		231
		{
			title = "Platform Toggle Ceiling";
			id = "Plat_ToggleCeiling";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
		}
	}

	teleport
	{
		title = "Teleport";
		
		39
		{
			title = "Teleport to Pain State (silent)";
			id = "Teleport_ZombieChanger";
			
			arg0
			{
				title = "Target Teleport Dest. Tag";
				type = 14;
				targetclasses = "TeleportDest,TeleportDest2,TeleportDest3";
			}
			arg1
			{
				title = "Target Sector Tag";
				type = 13;
			}
		}
		70	// Teleport
		{
			arg2
			{
				title = "Source Fog";
				type = 11;
				enum = "yesno";
			}
		}
		71	// Teleport_NoFog
		{
			arg1
			{
				title = "Teleport Dest. angle usage";
				type = 11;
				enum
				{
					0 = "Don't change angle and velocity (Hexen-compat)";
					1 = "Always use the teleport exit's angle (Strife-compat)";
					2 = "Adjust relatively to the teleport exit's angle, but in the wrong direction (Boom-compat)";
					3 = "Adjust relatively to the teleport exit's angle (Boom-fixed)";
				}
			}
			arg3
			{
				title = "Keep rel. Height";
				type = 11;
				enum = "noyes";
			}
		}
		74	// Teleport_NewMap
		{
			arg2
			{
				title = "Keep Orientation";
				type = 11;
				enum = "noyes";
			}
		}
		76
		{
			title = "Teleport Other";
			id = "TeleportOther";
			
			arg0
			{
				title = "Thing Tag";
				type = 14;
			}
			arg1
			{
				title = "Target MapSpot Tag";
				type = 14;
				targetclasses = "MapSpot,MapSpotGravity";
			}
			arg2
			{
				title = "Fog";
				type = 11;
				enum = "noyes";
			}
		}
		77
		{
			title = "Teleport Group";
			id = "TeleportGroup";
			
			arg0
			{
				title = "Thing Tag";
				tooltip = "The TID of the actor(s) to teleport.\nIf 0, teleports the activator only.";
				type = 14;
			}
			arg1
			{
				title = "Source Teleport Dest. Tag";
				type = 14;
				targetclasses = "TeleportDest,TeleportDest2,TeleportDest3";
			}
			arg2
			{
				title = "Target Teleport Dest. Tag";
				type = 14;
				targetclasses = "TeleportDest,TeleportDest2,TeleportDest3";
			}
			arg3
			{
				title = "Move Source";
				type = 11;
				enum = "noyes";
			}
			arg4
			{
				title = "Fog";
				type = 11;
				enum = "noyes";
			}
		}
		78
		{
			title = "Teleport in Sector";
			id = "TeleportInSector";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Source Tag";
				tooltip = "The spot relative to which to teleport.";
				type = 14;
			}
			arg2
			{
				title = "Target Teleport Dest. Tag";
				type = 14;
				targetclasses = "TeleportDest,TeleportDest2,TeleportDest3";
			}
			arg3
			{
				title = "Fog";
				type = 11;
				enum = "noyes";
			}
			arg4
			{
				title = "Group Thing Tag";
				tooltip = "The TID of the thing(s) to teleport.\nIf 0, teleports all actors in the sector";
				type = 14;
			}
		}
		154
		{
			title = "Teleport (no Stop)";
			id = "Teleport_NoStop";
			
			arg0
			{
				title = "Target Teleport Dest. Tag";
				type = 14;
				targetclasses = "TeleportDest,TeleportDest2,TeleportDest3";
			}
			arg1
			{
				title = "Target Sector Tag";
				type = 13;
			}
			arg2
			{
				title = "Fog";
				type = 11;
				enum = "yesno";
			}
		}
		215
		{
			title = "Teleport to Line";
			id = "Teleport_Line";
			
			arg1
			{
				title = "Target Line Tag";
				type = 15;
			}
			arg2
			{
				title = "Reverse Angle";
				type = 11;
				enum = "noyes";
			}
		}
	}

	thing
	{
		17
		{
			title = "Thing Raise";
			id = "Thing_Raise";
			
			arg0
			{
				title = "Thing Tag";
				type = 14;
			}
		}
		18
		{
			title = "Start Conversation";
			id = "StartConversation";
			
			arg0
			{
				title = "Thing Tag";
				type = 14;
			}
			arg1
			{
				title = "Face Talker";
				type = 11;
				enum = "noyes";
				default = 1;
			}
		}
		19
		{
			title = "Thing Stop";
			id = "Thing_Stop";
			
			arg0
			{
				title = "Thing Tag";
				type = 14;
			}
		}
		72 // ThrustThing
		{
			arg2
			{
				title = "No Limit";
				type = 11;
				enum = "noyes";
			}
			arg3
			{
				title = "Target Thing Tag";
				type = 14;
			}
		}
		73 // DamageThing
		{
			arg1
			{
				title = "Death";
				type = 11;
				enum = "death_types";
			}
		}
		79
		{
			title = "Set Conversation";
			id = "Thing_SetConversation";
			arg0
			{
				title = "Thing Tag";
				type = 14;
			}
			arg1
			{
				title = "Conversation ID";
			}
		}
		119
		{
			title = "Damage Thing by Tag";
			id = "Thing_Damage";
			
			arg0
			{
				title = "Thing Tag";
				type = 14;
			}
			arg1
			{
				title = "Damage";
				default = 100;
			}
			arg2
			{
				title = "Death";
				type = 11;
				enum = "death_types";
			}
		}
		125
		{
			title = "Move Thing";
			id = "Thing_Move";
			
			arg0
			{
				title = "Thing Tag";
				type = 14;
			}
			arg1
			{
				title = "Target Thing Tag";
				type = 14;
			}
			arg2
			{
				title = "Fog";
				type = 11;
				enum = "yesno";
			}
		}
		127
		{
			title = "Thing Set Special";
			id = "Thing_SetSpecial";
			
			arg0
			{
				title = "Thing Tag";
				type = 14;
			}
			arg1
			{
				title = "Special";
				type = 4;
			}
			arg2
			{
				title = "Arg 1";
			}
			arg3
			{
				title = "Arg 2";
			}
			arg4
			{
				title = "Arg 3";
			}
		}
		128
		{
			title = "Thing Thrust Z";
			id = "ThrustThingZ";
			
			arg0
			{
				title = "Thing Tag";
				type = 14;
			}
			arg1
			{
				title = "Force";
			}
			arg2
			{
				title = "Down/Up";
				type = 11;
				enum = "updown";
			}
			arg3
			{
				title = "Set/Add";
				type = 11;
				enum = "setadd";
			}
		}
		135	// Thing_Spawn
		{
			arg3
			{
				title = "New Thing Tag";
				type = 14;
			}
		}
		137	// Thing_SpawnNoFog
		{
			arg3
			{
				title = "New Thing Tag";
				type = 14;
			}
		}
		139
		{
			title = "Spawn Thing Facing";
			id = "Thing_SpawnFacing";
			
			arg0
			{
				title = "Mapspot Tag";
				type = 14;
				targetclasses = "MapSpot,MapSpotGravity";
			}
			arg1
			{
				title = "Spawn Thing";
				type = 11;
				enum = "spawnthing";
			}
			arg2
			{
				title = "Fog";
				type = 11;
				enum = "yesno";
			}
			arg3
			{
				title = "New Thing Tag";
				type = 14;
			}
		}
		175
		{
			title = "Spawn Projectile (Intercept)";
			id = "Thing_ProjectileIntercept";
			
			arg0
			{
				title = "Mapspot Tag";
				type = 14;
				targetclasses = "MapSpot,MapSpotGravity";
			}
			arg1
			{
				title = "Projectile Type";
				type = 11;
				enum = "spawn_projectile";
			}
			arg2
			{
				title = "Speed";
			}
			arg3
			{
				title = "Target Thing Tag";
				type = 14;
			}
			arg4
			{
				title = "New Thing Tag";
				type = 14;
			}
		}
		176
		{
			title = "Change Thing Tag";
			id = "Thing_ChangeTID";
			
			arg0
			{
				title = "Old Thing Tag";
				type = 14;
			}
			arg1
			{
				title = "New Thing Tag";
				type = 14;
			}
		}
		177
		{
			title = "Thing Hate";
			id = "Thing_Hate";
			
			arg0
			{
				title = "Hater Tag";
				type = 14;
			}
			arg1
			{
				title = "Hatee Tag";
				type = 14;
			}
			arg2
			{
				title = "Hate";
				type = 11;
				enum
				{
					0 = "Target only";
					1 = "Target and Player";
					2 = "Forced Target and Player";
					3 = "Hunt Target and Player";
					4 = "Forced Hunt Target and Player";
					5 = "Target, Ignore Player";
					6 = "Forced Target, Ignore Player";
				}
			}
		}
		178
		{
			title = "Spawn Aimed Projectile";
			id = "Thing_ProjectileAimed";
			
			arg0
			{
				title = "Mapspot Tag";
				type = 14;
				targetclasses = "MapSpot,MapSpotGravity";
			}
			arg1
			{
				title = "Projectile Type";
				type = 11;
				enum = "spawn_projectile";
			}
			arg2
			{
				title = "Speed";
			}
			arg3
			{
				title = "Target Thing Tag";
				type = 14;
			}
			arg4
			{
				title = "New Thing Tag";
				type = 14;
			}
		}
		180
		{
			title = "Set Thing Translation";
			id = "Thing_SetTranslation";
			
			arg0
			{
				title = "Thing Tag";
				type = 14;
			}
			arg1
			{
				title = "Translation Index";
			}
		}
		229
		{
			title = "Thing Set Goal";
			id = "Thing_SetGoal";
			
			arg0
			{
				title = "Monster Thing Tag";
				type = 14;
			}
			arg1
			{
				title = "Target Thing Tag";
				type = 14;
			}
			arg2
			{
				title = "Delay";
				type = 11;
				enum 
				{
					0 = "No Delay";
					1 = "1 Second";
					2 = "2 Seconds";
					3 = "3 Seconds";
					5 = "5 Seconds";
					10 = "10 Seconds";
					15 = "15 Seconds";
					20 = "20 Seconds";
					25 = "25 Seconds";
					30 = "30 Seconds";
					60 = "1 Minute";
				}
			}
			arg3
			{
				title = "Don't Chase Target";
				type = 11;
				enum = "falsetrue";
			}
		}
		248
		{
			title = "Heal Thing";
			id = "HealThing";
			
			arg0
			{
				title = "Heal Amount";
			}
		}
		
	}

	script
	{
		title = "Script";
		
		83	// Script Locked Execute
		{
			arg4	// Key Number
			{
				type = 11;
				enum = "keys";
			}
		}
		84
		{
			title = "Script Execute with Result";
			id = "ACS_ExecuteWithResult";
			
			arg0
			{
				title = "Script Number";
			}
			arg1
			{
				title = "Script Argument 1";
			}
			arg2
			{
				title = "Script Argument 2";
			}
			arg3
			{
				title = "Script Argument 3";
			}
			arg4
			{
				title = "Script Argument 4";
			}
		}
		85
		{
			title = "Script Locked Execute (Door message)";
			id = "ACS_LockedExecuteDoor";
			
			arg0
			{
				title = "Script Number";
			}
			
			arg1
			{
				title = "Map Number";
			}
			
			arg2
			{
				title = "Script Argument 1";
			}
			
			arg3
			{
				title = "Script Argument 2";
			}
			
			arg4
			{
				title = "Key Number";
				type = 11;
				enum = "keys";
			}
		}
		158
		{
			title = "FraggleScript Execute";
			id = "FS_Execute";
			
			arg0
			{
				title = "Script Number";
			}
			arg1
			{
				title = "Side";
				type = 11;
				enum
				{
					0 = "Both";
					1 = "Front";
				}
			}
			arg2
			{
				title = "Key";
				type = 11;
				enum = "keys";
			}
			arg3
			{
				title = "Message";
				type = 11;
				enum
				{
					0 = "Open door";
					1 = "Activate object";
				}
			}
		}
		226
		{
			title = "Script Execute Always";
			id = "ACS_ExecuteAlways";
			
			arg0
			{
				title = "Script Number";
			}
			
			arg1
			{
				title = "Map Number";
			}
			
			arg2
			{
				title = "Script Argument 1";
			}
			
			arg3
			{
				title = "Script Argument 2";
			}
			
			arg4
			{
				title = "Script Argument 3";
			}
		}
	}

	end
	{
		243
		{
			title = "End Normal";
			id = "Exit_Normal";
			
			arg0
			{
				title = "Position";
			}
		}
		244
		{
			title = "End Secret";
			id = "Exit_Secret";
			
			arg0
			{
				title = "Position";
			}
		}
	}

	scroll
	{
		title = "Scroll";
		
		52
		{
			title = "Scroll Wall";
			id = "Scroll_Wall";
			requiresactivation = false;
			
			arg0
			{
				title = "Line Tag";
				type = 15;
			}
			arg1
			{
				title = "Horizontal speed";
			}
			arg2
			{
				title = "Vertical speed";
			}
			arg3
			{
				title = "Side";
				type = 11;
				enum = "frontback";
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Scroll upper";
					2 = "Scroll middle";
					4 = "Scroll lower";
				}
			}
		}
		
		100 //Scroll_Texture_Left
		{
			arg1
			{
				title = "Sidedef Part";
				type = 12;
				enum = "sidedef_part";
			}
		}
		
		101 //Scroll_Texture_Right
		{
			arg1
			{
				title = "Sidedef Part";
				type = 12;
				enum = "sidedef_part";
			}
		}
		
		102 //Scroll_Texture_Up
		{
			arg1
			{
				title = "Sidedef Part";
				type = 12;
				enum = "sidedef_part";
			}
		}
		
		103 //Scroll_Texture_Down
		{
			arg1
			{
				title = "Sidedef Part";
				type = 12;
				enum = "sidedef_part";
			}
		}
		
		221
		{
			title = "Scroll Texture Both";
			id = "Scroll_Texture_Both";
			requiresactivation = false;
			
			arg0
			{
				title = "Line Tag";
				type = 15;
			}
			arg1
			{
				title = "Left Speed";
				type = 11;
				enum = "scroll_speeds";
			}
			arg2
			{
				title = "Right Speed";
				type = 11;
				enum = "scroll_speeds";
			}
			arg3
			{
				title = "Down Speed";
				type = 11;
				enum = "scroll_speeds";
			}
			arg4
			{
				title = "Up Speed";
				type = 11;
				enum = "scroll_speeds";
			}
		}
		222
		{
			title = "Scroll Texture Model";
			id = "Scroll_Texture_Model";
			requiresactivation = false;
			
			arg1
			{
				title = "Options";
				type = 12;
				enum
				{
					1 = "Displacement";
					2 = "Accelerative";
				}
			}
		}
		
		223
		{
			title = "Scroll Floor";
			id = "Scroll_Floor";
			requiresactivation = false;
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Options";
				type = 12;
				enum
				{
					1 = "Displacement";
					2 = "Accelerative";
					4 = "Scroll by linedef dx/dy";
				}
			}
			arg2
			{
				title = "Scroll";
				type = 11;
				enum
				{
					0 = "Texture only";
					1 = "Things only";
					2 = "Both";
				}
			}
			arg3
			{
				title = "Horizontal Speed";
				default = 128;
				type = 11;
				enum = "sector_scroll_speeds_x";
			}
			arg4
			{
				title = "Vertical Speed";
				default = 128;
				type = 11;
				enum = "sector_scroll_speeds_y";
			}
		}
		224
		{
			title = "Scroll Ceiling";
			id = "Scroll_Ceiling";
			requiresactivation = false;
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Options";
				type = 12;
				enum
				{
					1 = "Displacement";
					2 = "Accelerative";
					4 = "Scroll by linedef dx/dy";
				}
			}
			arg3
			{
				title = "Horizontal Speed";
				default = 128;
				type = 11;
				enum = "sector_scroll_speeds_x";
			}
			arg4
			{
				title = "Vertical Speed";
				default = 128;
				type = 11;
				enum = "sector_scroll_speeds_y";
			}
		}
		225
		{
			title = "Scroll Texture by Offsets";
			id = "Scroll_Texture_Offsets";
			requiresactivation = false;
			
			arg0
			{
				title = "Sidedef Part";
				type = 12;
				enum = "sidedef_part";
			}
		}
	}


	light
	{
		109
		{
			title = "Lightning Control";
			id = "Light_ForceLightning";
			
			arg0
			{
				title = "Mode";
				type = 11;
				enum
				{
					0 = "Enable Lightning Mode";
					1 = "Flash Once";
					2 = "Terminate Lightning Mode";
				}
			}
		}
		117
		{
			title = "Light Stop";
			id = "Light_Stop";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
		}
		232
		{
			title = "Light Strobe (Doom mode)";
			id = "Light_StrobeDoom";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Brightest Duration (tics)";
				type = 11;
				enum = "delay_tics";
				default = 35;
			}
			arg2
			{
				title = "Darkest Duration (tics)";
				type = 11;
				enum = "delay_tics";
				default = 35;
			}
		}
		233
		{
			title = "Light Change to Darkest Neightbour";
			id = "Light_MinNeighbor";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
		}
		234
		{
			title = "Light Change to Brightest Neightbour";
			id = "Light_MaxNeighbor";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
		}
	}

	sector
	{
		title = "Sector";
		
		48
		{
			title = "Sector Attach 3D Midtex";
			id = "Sector_Attach3dMidtex";
			requiresactivation = false;
			
			arg0
			{
				title = "Line Tag";
				type = 15;
			}
			arg1
			{
				title = "Sector Tag";
				type = 13;
			}		
			arg2
			{
				title = "Floor / Ceiling";
				type = 11;
				enum = "floorceiling";
			}
		}
		51
		{
			title = "Sector Set Link";
			id = "Sector_SetLink";
			
			arg0
			{
				title = "Control Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Target Sector Tag";
				type = 13;
			}
			arg2
			{
				title = "Floor / Ceiling";
				type = 11;
				enum = "floorceiling";
			}
			arg3
			{
				title = "Move Type";
				type = 12;
				enum
				{
					0 = "Unlink target sector(s) from the control sector";
					1 = "Link target sector's floor to the specified surface of the control sector";
					2 = "Link target sector's ceiling to the specified surface of the control sector";
					4 = "Target floor movement is the opposite direction as the control sector's surface (requires bit 1)";
					8 = "Target ceiling movement is the opposite direction as the control sector's surface (requires bit 2)";
				}
			}
		}
		
		98
		{
			title = "Sector Set Translucent";
			id = "Sector_SetTranslucent";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Floor / Ceiling";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Opacity";
			}
			arg3
			{
				title = "Translucency Type";
				type = 11;
				enum
				{
					0 = "Normal";
					1 = "Additive";
				}
			}
		}

		54
		{
			title = "Sector Change Flags";
			id = "Sector_ChangeFlags";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Set Flags";
				type = 12;
				enum = "sector_flags";
			}
			arg2
			{
				title = "Clear Flags";
				type = 12;
				enum = "sector_flags";
			}
		}
		57
		{
			title = "Sector Set Portal";
			id = "Sector_SetPortal";
			requiresactivation = false;
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Portal Type";
				type = 11;
				enum
				{
					0 = "Link to portal with same tag";
					1 = "Copy portal from second tag";
					2 = "Eternity-style skybox portal";
					3 = "Plane portal";
					4 = "Horizon portal";
					5 = "Copy portal to line";
					6 = "Interactive portal";
				}
			}
			arg2
			{
				title = "Plane";
				type = 11;
				enum
				{
					0 = "Floor";
					1 = "Ceiling";
					2 = "Both";
					3 = "Any (\"Copy portal\" types only)";
				}
			}
			arg3
			{
				title = "Misc";
				tooltip = "For type 0 portal: specifies whether the line belongs to the sector viewed\nthrough the portal (1) or the sector in which the portal is seen (0).\nFor type 1 portal: specifies the sector tag of the portal to copy.";
			}
			arg4
			{
				title = "Opacity";
			}
		}
		58
		{
			title = "Sector Copy Scroller";
			id = "Sector_CopyScroller";
			requiresactivation = false;
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Scroller Type";
				type = 12;
				enum
				{
					1 = "Copy ceiling scroller";
					2 = "Copy floor scroller";
					4 = "Copy carrying effect";
				}
			}		
		}
		160
		{
			title = "Sector Set 3D Floor";
			id = "Sector_Set3dFloor";
			requiresactivation = false;
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Type";
				type = 26;
				default = 1;
				enum
				{
					0 = "Vavoom-Style";
					1 = "Solid";
					2 = "Swimmable";
					3 = "Non-Solid";
				}
				flags
				{
					4 = "Render-Inside";
					16 = "Invert Visibility Rules";
					32 = "Invert Shootability Rules";
				}
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Disable light effects";
					2 = "Restrict light inside";
					4 = "Fog effect (GZDoom only)";
					8 = "Ignore bottom height";
					16 = "Use upper texture";
					32 = "Use lower texture";
					64 = "Additive transluency";
					512 = "Fade effect (no view blend)";
					1024 = "Reset light effects";
				}
			}
			arg3
			{
				title = "Opacity";
				default = 255;
			}
		}
		161
		{
			title = "Sector Set Contents (Vavoom compatibility)";
			id = "Sector_SetContents";
			
			arg0
			{
				title = "Type";
				type = 11;
				enum
				{
					0 = "Empty";
					1 = "Water";
					2 = "Lava";
					3 = "Nukage";
					4 = "Slime";
					5 = "Hellslime";
					6 = "Blood";
					7 = "Sludge";
					8 = "Hazard";
					9 = "Boom-style water";
				}
			}
			arg1
			{
				title = "Translucency Percent";
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't block movement";
					2 = "Don't block sight";
					4 = "Don't block shooting";
					8 = "Additive translucency";
				}
			}
		}
		185
		{
			title = "Sector Rotate Flat";
			id = "Sector_SetRotation";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Floor Angle";
				type = 8;
			}
			arg2
			{
				title = "Ceiling Angle";
				type = 8;
			}
		}
		186
		{
			title = "Sector Ceiling Panning";
			id = "Sector_SetCeilingPanning";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Horizontal Integral";
			}
			arg2
			{
				title = "Horizontal Fractional";
			}
			arg3
			{
				title = "Vertical Integral";
			}
			arg4
			{
				title = "Vertical Fractional";
			}
		}
		187
		{
			title = "Sector Floor Panning";
			id = "Sector_SetFloorPanning";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Horizontal Integral";
			}
			arg2
			{
				title = "Horizontal Fractional";
			}
			arg3
			{
				title = "Vertical Integral";
			}
			arg4
			{
				title = "Vertical Fractional";
			}
		}
		188
		{
			title = "Sector Ceiling Scale";
			id = "Sector_SetCeilingScale";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Horizontal Integral";
			}
			arg2
			{
				title = "Horizontal Fractional";
			}
			arg3
			{
				title = "Vertical Integral";
			}
			arg4
			{
				title = "Vertical Fractional";
			}
		}
		189
		{
			title = "Sector Floor Scale";
			id = "Sector_SetFloorScale";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Horizontal Integral";
			}
			arg2
			{
				title = "Horizontal Fractional";
			}
			arg3
			{
				title = "Vertical Integral";
			}
			arg4
			{
				title = "Vertical Fractional";
			}
		}
		212
		{
			title = "Sector Color";
			id = "Sector_SetColor";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Red";
			}
			arg2
			{
				title = "Green";
			}
			arg3
			{
				title = "Blue";
			}
			arg4
			{
				title = "Desaturation";
			}
		}
		213
		{
			title = "Sector Fade";
			id = "Sector_SetFade";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Red";
			}
			arg2
			{
				title = "Green";
			}
			arg3
			{
				title = "Blue";
			}
		}
		214
		{
			title = "Sector Damage";
			id = "Sector_SetDamage";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Damage Amount";
				default = 15;
			}
			arg2
			{
				title = "Death";
				type = 11;
				enum = "death_types";
			}
		}
		216
		{
			title = "Sector Gravity";
			id = "Sector_SetGravity";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Gravity Integral";
			}
			arg2
			{
				title = "Gravity Fractional";
			}
		}
		
		218
		{
			title = "Sector Wind";
			id = "Sector_SetWind";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Wind Strength";
			}
			arg2
			{
				title = "Wind Angle";
				type = 22;
			}
			arg3
			{
				title = "Use Line Vector";
				type = 11;
				enum = "noyes";
			}
		}
		219
		{
			title = "Sector Friction";
			id = "Sector_SetFriction";
			requiresactivation = false;
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Friction Amount";
				type = 11;
				enum
				{
					0 = "Use Line Length";
					1 = "Very Sludgy";
					50 = "Sludgy";
					100 = "Normal";
					200 = "Icy";
					255 = "Very Icy";
				}
			}
		}
		
		220
		{
			title = "Sector Current";
			id = "Sector_SetCurrent";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Current Strength";
			}
			arg2
			{
				title = "Current Angle";
				type = 22;
			}
			arg3
			{
				title = "Use Line Vector";
				type = 11;
				enum = "noyes";
			}
		}
	}

	alert
	{
		title = "Alert";
		
		173
		{
			title = "Alert monsters";
			id = "NoiseAlert";
			
			arg0
			{
				title = "Target Tag";
				type = 14;
			}
			arg1
			{
				title = "Emitter Tag";
				type = 14;
			}
		}
	}

	communicator
	{
		title = "Communicator";
		
		174
		{
			title = "Communicator Message";
			id = "SendToCommunicator";
			
			arg0
			{
				title = "Message ID";
			}
			arg1
			{
				title = "Front Side Only";
				type = 11;
				enum = "noyes";
			}
			arg2
			{
				title = "Print Activator Name";
				type = 11;
				enum = "noyes";
			}
			arg3
			{
				title = "Add to Log";
				type = 11;
				enum = "yesno";
			}
		}
	}

	change
	{
		title = "Change";
		
		157
		{
			title = "Set Global Fog Parameter (GZDoom only)";
			id = "SetGlobalFogParameter";
			
			arg0
			{
				title = "Property";
				type = 11;
				enum
				{
					0 = "Density";
					1 = "Outside density";
					2 = "Skyfog";
				}
			}
			arg1
			{
				title = "Value";
			}
		}
		179
		{
			title = "Change Skill";
			id = "ChangeSkill";
			
			arg0
			{
				title = "New Skill Level";
				type = 11;
				enum 
				{
					0 = "Very Easy";
					1 = "Easy";
					2 = "Normal";
					3 = "Hard";
					4 = "Nightmare!";
				}
			}
		}
	}

	plane
	{
		title = "Plane";
		
		118
		{
			title = "Plane Copy (slope)";
			id = "Plane_Copy";
			requiresactivation = false;
			
			arg0
			{
				title = "Front Floor Tag";
				type = 13;
			}
			arg1
			{
				title = "Front Ceiling Tag";
				type = 13;
			}
			arg2
			{
				title = "Back Floor Tag";
				type = 13;
			}
			arg3
			{
				title = "Back Ceiling Tag";
				type = 13;
			}
			arg4
			{
				title = "Share Slope";
				type = 12;
				enum
				{
					1 = "Front floor to back sector";
					2 = "Back floor to front sector";
					4 = "Front ceiling to back sector";
					8 = "Back ceiling to front sector";
				}
			}
		}
		159
		{
			title = "Plane Reflection (OpenGL only)";
			id = "Sector_SetPlaneReflection";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Floor Reflectiveness";
			}
			arg2
			{
				title = "Ceiling Reflectiveness";
			}
		}
		181
		{
			title = "Plane Align (slope)";
			id = "Plane_Align";
			requiresactivation = false;
			
			arg0
			{
				title = "Align Floor";
				type = 11;
				enum
				{
					0 = "None";
					1 = "Front";
					2 = "Back";
				}
			}
			arg1
			{
				title = "Align Ceiling";
				type = 11;
				enum
				{
					0 = "None";
					1 = "Front";
					2 = "Back";
				}
			}
		}
	}

	static
	{
		title = "Static";
		
		190
		{
			title = "Static Init";
			id = "Static_Init";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Property";
				type = 11;
				enum
				{
					0 = "Set the gravity to the length of the linedef";
					1 = "Set the light or fog color in a sector";
					2 = "Set damage to the length of the linedef";
					3 = "Define a sector link";
					255 = "Use the line's upper texture as the sky in any tagged sectors";
				}
			}
			arg2
			{
				title = "Flip Sky / Ceiling";
			}
			arg3
			{
				title = "Movement Type";
			}
		}
	}

	player
	{
		title = "Player";
		
		191
		{
			title = "Set Player Property";
			id = "SetPlayerProperty";
			
			arg0
			{
				title = "Target";
				type = 11;
				enum
				{
					0 = "Activator";
					1 = "Everyone";
				}
			}
			arg1
			{
				title = "Enable";
				type = 11;
				enum = "noyes";
			}
			arg2
			{
				title = "Property";
				type = 11;
				enum
				{
					0 = "PROP_FROZEN";
					1 = "PROP_NOTARGET";
					2 = "PROP_INSTANTWEAPONSWITCH";
					3 = "PROP_FLY";
					4 = "PROP_TOTALLYFROZEN";
					16 = "PROP_BUDDHA";
				}
			}
		}
	}

	translucent
	{
		title = "Translucent";
		
		208
		{
			title = "Translucent Line";
			id = "TranslucentLine";
			requiresactivation = false;
			
			arg1
			{
				title = "Opacity";
				default = 128;
			}
			arg2
			{
				title = "Additive";
				type = 11;
				enum = "noyes";
			}
		}
	}

	point
	{
		title = "Point";
		
		227
		{
			title = "Point Pusher/Puller Set Force";
			id = "PointPush_SetForce";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Thing Tag";
				type = 14;
			}
			arg2
			{
				title = "Strength";
			}
			arg3
			{
				title = "Use Line Vector";
				type = 11;
				enum = "noyes";
			}
		}
	}

	camera
	{
		title = "Camera";
		
		237
		{
			title = "Change Camera";
			id = "ChangeCamera";
			
			arg0
			{
				title = "Thing Tag";
				type = 14;
			}
			arg1
			{
				title = "Target";
				type = 11;
				enum
				{
					0 = "Activator";
					1 = "Everyone";
				}
			}
			arg2
			{
				title = "Movement Cancels";
				type = 11;
				enum = "noyes";
			}
		}
	}

	elevator
	{
		title = "Elevator";
		
		245
		{
			title = "Elevator Raise to Nearest Floor";
			id = "Elevator_RaiseToNearest";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
		}
		246
		{
			title = "Elevator Move to Activated Floor";
			id = "Elevator_MoveToFloor";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
		}
		247
		{
			title = "Elevator Lower to Nearest Floor";
			id = "Elevator_LowerToNearest";
			
			arg0
			{
				title = "Sector Tag";
				type = 13;
			}
			arg1
			{
				title = "Movement Speed";
				type = 11;
				enum = "plat_speeds";
				default = 16;
			}
		}
	}
	line
	{
		156 // Line_SetPortal
		{
			arg1
			{
				title = "This Line Tag";
				tooltip = "The tag number of the current line";
				type = 15;
			}	
		}
	}
	polyobj
	{
		1	// Polyobject Start Line
		{
			arg3
			{
				title = "Set Line ID";
				type = 0;
			}
		}
		5	// Polyobject Explicit Line
		{
			arg4
			{
				title = "Set Line ID";
				type = 0;
			}
		}
	}
	plane
	{
		181 //Plane_Align
		{
			arg2
			{
				title = "Set Line ID";
				type = 0;
			}
		}
	}
	scroll
	{
		52 //Scroll_Wall
		{
			arg0
			{
				title = "Set Line ID";
				type = 0;
			}
		}
		221 //Scroll_Texture_Both
		{
			arg0
			{
				title = "Line ID";
				type = 0;
			}
		}
		222 //Scroll_Texture_Model
		{
			arg0
			{
				title = "Set Line ID";
				type = 0;
			}
		}
	}
	sector
	{
		48 //Sector_Attach3dMidtex
		{
			arg0
			{
				title = "Line ID";
				type = 0;
			}
		}
		160 //Sector_Set3dFloor
		{
			arg1
			{
				title = "Type";
				type = 26;
				default = 1;
				enum
				{
					0 = "Vavoom-Style";
					1 = "Solid";
					2 = "Swimmable";
					3 = "Non-Solid";
				}
				flags
				{
					4 = "Render-Inside";
					8 = "Use Arg5 as Line ID";
					16 = "Invert Visibility Rules";
					32 = "Invert Shootability Rules";
				}
			}
			arg4
			{
				title = "Line ID / Hi-Tag";
			}
		}
	}
	teleport
	{
		215 //Teleport_Line
		{
			arg0
			{
				title = "Line ID";
				type = 0;
			}
			arg1
			{
				title = "Target Line ID";
				type = 0;
			}
		}
	}
	transfer
	{
		16 //Transfer_WallLight
		{
			arg0
			{
				title = "Line ID";
				type = 0;
			}
		}
  }
	translucent
	{
		208 //TranslucentLine
		{
			arg0
			{
				title = "Set Line ID";
				type = 0;
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Sound boundary";
					2 = "Railing";
					4 = "Block floating monsters";
					8 = "Clip mid texture";
					16 = "Wrap mid texture";
					32 = "3D mid texture";
					64 = "Check switch height";
				}
			}
		}
	}
		// No Line_SetIdentification in UDMF!
	line
	{
		121 = NULL;
	}
}

enums
{
	change
	{
		0 = "No texture or type change";
		1 = "Copy texture, zero type; trigger model";
		2 = "Copy texture, zero type; numeric model";
		3 = "Copy texture, preserve type; trigger model";
		4 = "Copy texture, preserve type; numeric model";
		5 = "Copy texture and type; trigger model";
		6 = "Copy texture and type; numeric model";
	}
}