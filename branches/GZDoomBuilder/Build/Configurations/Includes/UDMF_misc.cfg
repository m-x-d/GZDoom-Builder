
// Basic UDMF stuff.


thingflags
{
	skill1 = "Skill 1";
	skill2 = "Skill 2";
	skill3 = "Skill 3";
	skill4 = "Skill 4";
	skill5 = "Skill 5";
	ambush = "Deaf";
	single = "Singleplayer";
	dm = "Deathmatch";
	coop = "Cooperative";
	friend = "Friendly";
	dormant = "Dormant";
	standing = "Standing";
	strifeally = "Ally";
	translucent = "Translucent";
	invisible = "Invisible";
}


// Default flags for first new thing
defaultthingflags
{
	skill1;
	skill2;
	skill3;
	skill4;
	skill5;
	single;
	coop;
	dm;
}


// How thing flags should be compared (for the stuck thing error check)
thingflagscompare
{
	skills {
		skill1;
		skill2;
		skill3;
		skill4;
		skill5;
	}

	gamemodes {
		single;
		dm;
		coop;
	}

	classes {
		class1;
		class2;
		class3;
	}
}

sectorflags
{
	silent = "Silent";
	hidden = "Not shown on automap";
	nofallingdamage = "No falling damage";
	waterzone = "Sector is under water and swimmable";
	norespawn = "Players can't respawn in this sector";
	dropactors = "Actors drop with instantly moving floors";
}

linedefflags
{
	blocking = "Impassable";
	blockmonsters = "Block monster";
	twosided = "Doublesided";
	dontpegtop = "Upper unpegged";
	dontpegbottom = "Lower unpegged";
	secret = "Secret";
	blocksound = "Block sound";
	dontdraw = "Hidden";
	mapped = "Initially shown on automap";
}


linedefactivations
{
	playercross = "When player walks over";
	playeruse = "When player presses use";
	monstercross = "When monster walks over";
	monsteruse = "When monster presses use";
	impact = "On projectile impact";
	playerpush = "When player bumps";
	monsterpush = "When monsters bumps";
	missilecross = "When projectile crosses";
	repeatspecial = "Repeatable action";
	passuse = "Pass use on";
}

sidedefflags
{
	clipmidtex = "Clip middle texture";
	wrapmidtex = "Wrap middle texture";
	nofakecontrast = "No fake contrast";
	nodecals = "No decals";
	smoothlighting = "Smooth lighting";
	lightfog = "Use sidedef brightness on fogged walls";
}

/*
MAP LUMP NAMES
Map lumps are loaded with the map as long as they are right after each other. When the editor
meets a lump which is not defined in this list it will ignore the map if not satisfied.
The order of items defines the order in which lumps will be written to WAD file on save.
To indicate the map header lump, use ~MAP

Legenda:
required = Lump is required to exist.
blindcopy = Lump will be copied along with the map blindly. (useful for lumps Doom Builder doesn't use)
nodebuild = The nodebuilder generates this lump.
allowempty = The nodebuilder is allowed to leave this lump empty.
script = This lump is a text-based script. Specify the filename of the script configuration to use.
*/

udmfmaplumpnames_begin
{
	~MAP
	{
		required = true;
		blindcopy = true;
		nodebuild = false;
	}
	
	TEXTMAP
	{
		required = true;
		nodebuild = true;
		allowempty = true;
	}
}

udmfmaplumpnames_end
{
	ENDMAP
	{
		required = true;
		nodebuild = false;
		allowempty = true;
	}
}


// Default thing filters
// (these are not required, just useful for new users)
/*thingsfilters
{
	
	filter0
	{
		name = "Keys only";
		category = "keys";
		type = -1;
	}
	
	
	filter2
	{
		name = "Skill 1";
		category = "";
		type = -1;
		
		fields
		{
			skill1 = true;
		}
		
	}
	
	
	filter3
	{
		name = "Skill 2";
		category = "";
		type = -1;
		
		fields
		{
			skill2 = true;
		}
		
	}
	
	
	filter4
	{
		name = "Skill 3";
		category = "";
		type = -1;
		
		fields
		{
			skill3 = true;
		}
		
	}
	
	
	filter5
	{
		name = "Skill 4";
		category = "";
		type = -1;
		
		fields
		{
			skill4 = true;
		}
		
	}
	
	
	filter6
	{
		name = "Skill 5";
		category = "";
		type = -1;
		
		fields
		{
			skill5 = true;
		}
		
	}
	
	
	filter7
	{
		name = "Skill 6";
		category = "";
		type = -1;
		
		fields
		{
			skill6 = true;
		}
		
	}
	
	
	filter8
	{
		name = "Skill 7";
		category = "";
		type = -1;
		
		fields
		{
			skill7 = true;
		}
		
	}
	
	
	filter9
	{
		name = "Skill 8";
		category = "";
		type = -1;
		
		fields
		{
			skill8 = true;
		}
		
	}
	
} */

/*
GAME DETECT PATTERN
Used to guess the game for which a WAD file is made.

1 = One of these lumps must exist
2 = None of these lumps must exist
3 = All of these lumps must exist
*/

gamedetect_format
{
	THINGS = 2;
	LINEDEFS = 2;
	SIDEDEFS = 2;
	VERTEXES = 2;
	//SEGS = 2;
	//SSECTORS = 2;
	//NODES = 2;
	SECTORS = 2;
	//REJECT = 2;
	TEXTMAP = 3;
	ENDMAP = 3;
	//BEHAVIOR = 2;
}

