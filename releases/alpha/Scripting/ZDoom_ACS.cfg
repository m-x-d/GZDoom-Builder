/*******************************************************************\
	Doom Builder Script highlighting definitions for ACS
\*******************************************************************/

// Compiler settings
compiler = "acc";
parameters = "%FI %FO";
resultlump = "BEHAVIOR";

// Editor settings
casesensitive = 0;
insertcase = 0;		// 0=Normal, 1=Lowercase, 2=Uppercase
linecomment = "//";
commentopen = "/*";
commentclose = "*/";
string = "\"";
escape = "\\";
terminator = ";";
scopeopen = "{";
scopeclose = "}";
delimiters = " \n\r\t(){}[]:;!%^&*-+=.,<>/\?|\"";
functionopen = "(";
functionclose = ")";
argumentdelimiter = ",";
keywordhelp = "http://www.zdoom.org/wiki/index.php?title=%K";

keywords
{
	#Define = "#Define identifier expression";
	#Include = "#Include \"\"";
	#Library = "#Library \"\"";
	ACS_Execute = "ACS_Execute(script, map, arg1, arg2, arg3)";
	ACS_ExecuteAlways = "ACS_ExecuteAlways(script, map, arg1, arg2, arg3)";
	ACS_ExecuteWait = "ACS_ExecuteWait(script, map, arg1, arg2, arg3)";
	ACS_ExecuteWithResult = "ACS_ExecuteWithResult(script, arg1, arg2, arg3)";
	ACS_LockedExecute = "ACS_LockedExecute(script, map, arg1, arg2, lock)";
	ACS_Suspend = "ACS_Suspend(script, map)";
	ACS_Terminate = "ACS_Terminate(script, map)";
	ActivatorSound = "ActivatorSound(name, volume)";
	ActivatorTID = "ActivatorTID()";
	AmbientSound = "AmbientSound(name, volume)";
	Autosave = "Autosave()";
	bool = "bool expression";
	Break = "Break";
	CancelFade = "CancelFade()";
	Case = "Case expression:";
	Ceiling_CrushAndRaise = "Ceiling_CrushAndRaise(tag, speed, crush)";
	Ceiling_CrushAndRaiseA = "Ceiling_CrushAndRaiseA(tag, dspeed, uspeed, crush)";
	Ceiling_CrushAndRaiseSilentA = "Ceiling_CrushAndRaiseSilentA(tag, dspeed, uspeed, crush)";
	Ceiling_CrushRaiseAndStay = "Ceiling_CrushRaiseAndStay(tag, speed, crush)";
	Ceiling_CrushRaiseAndStayA = "Ceiling_CrushRaiseAndStayA(tag, dspeed, uspeed, crush)";
	Ceiling_CrushRaiseAndStaySilA = "Ceiling_CrushRaiseAndStaySilA(tag, dspeed, uspeed, crush)";
	Ceiling_CrushStop = "Ceiling_CrushStop(tag)";
	Ceiling_LowerAndCrush = "Ceiling_LowerAndCrush(tag, speed, crush)";
	Ceiling_LowerByValue = "Ceiling_LowerByValue(tag, speed, height)";
	Ceiling_LowerByValueTimes8 = "Ceiling_LowerByValueTimes8(tag, speed, height)";
	Ceiling_LowerInstant = "Ceiling_LowerInstant(tag, arg1, height)";
	Ceiling_LowerToFloor = "Ceiling_LowerToFloor(tag, speed)";
	Ceiling_LowerToHighestFloor = "Ceiling_LowerToHighestFloor(tag, speed)";
	Ceiling_LowerToLowest = "Ceiling_LowerToLowest(tag, speed)";
	Ceiling_MoveToValueTimes8 = "Ceiling_MoveToValueTimes8(tag, speed, height, neg)";
	Ceiling_RaiseByValue = "Ceiling_RaiseByValue(tag, speed, height)";
	Ceiling_RaiseByValueTimes8 = "Ceiling_RaiseByValueTimes8(tag, speed, height)";
	Ceiling_RaiseInstant = "Ceiling_RaiseInstant(tag, arg1, height)";
	Ceiling_RaiseToNearest = "Ceiling_RaiseToNearest(tag, speed)";
	Ceiling_Waggle = "Ceiling_Waggle(tag, amp, freq, offset, time)";
	ChangeCamera = "ChangeCamera(tid, who, revert)";
	ChangeCeiling = "ChangeCeiling(tag, flat)";
	ChangeFloor = "ChangeFloor(tag, flat)";
	ChangeSkill = "ChangeSkill(skill)";
	ChangeSky = "ChangeSky(sky1, sky2)";
	CheckInventory = "CheckInventory(type)";
	CheckWeapon = "CheckWeapon(weapon)";
	ClearInventory = "ClearInventory()";
	ClearLineSpecial = "ClearLineSpecial()";
	ClearForceField = "ClearForceField(tag)";
	Const = "Const";
	Continue = "Continue";
	cos = "cos(angle)";
	CreateTranslation = "CreateTranslation(transnumber, translation, translation, translation, ...)";
	DamageThing = "DamageThing(amount)";
	Default = "Default:";
	Delay = "Delay(tics)";
	Do = "Do";
	Door_Close = "Door_Close(tag, speed)";
	Door_CloseWaitOpen = "Door_CloseWaitOpen(tag, speed, delay)";
	Door_LockedRaise = "Door_LockedRaise(tag, speed, delay, lock)";
	Door_Open = "Door_Open(tag, speed)";
	Door_Raise = "Door_Raise(tag, speed, delay)";
	Elevator_LowerToNearest = "Elevator_LowerToNearest(tag, speed)";
	Elevator_MoveToFloor = "Elevator_MoveToFloor(tag, speed)";
	Elevator_RaiseToNearest = "Elevator_RaiseToNearest(tag, speed)";
	Else = "Else";
	Exit_Normal = "Exit_Normal(pos)";
	Exit_Secret = "Exit_Secret(pos)";
	FadeRange = "FadeRange(red1, green1, blue1, red2, green2, blue2, amount, seconds)";
	FadeTo = "FadeTo(red, green, blue, amount, seconds)";
	FixedDiv = "FixedDiv(fa, fb)";
	FixedMul = "FixedMul(fa, fb)";
	Floor_CrushStop = "Floor_CrushStop(tag)";
	Floor_Donut = "Floor_Donut(ptag, pspeed, sspeed)";
	Floor_LowerByValue = "Floor_LowerByValue(tag, speed, height)";
	Floor_LowerByValueTimes8 = "Floor_LowerByValueTimes8(tag, speed, height)";
	Floor_LowerInstant = "Floor_LowerInstant(tag, arg1, height)";
	Floor_LowerToHighest = "Floor_LowerToHighest(tag, speed, adjust)";
	Floor_LowerToLowest = "Floor_LowerToLowest(tag, speed)";
	Floor_LowerToLowestTxTy = "Floor_LowerToLowestTxTy(tag, speed)";
	Floor_LowerToNearest = "Floor_LowerToNearest(tag, speed)";
	Floor_MoveToValueTimes8 = "Floor_MoveToValueTimes8(tag, speed, height, neg)";
	Floor_RaiseAndCrush = "Floor_RaiseAndCrush(tag, speed, crush)";
	Floor_RaiseByTexture = "Floor_RaiseByTexture(tag, speed)";
	Floor_RaiseByValue = "Floor_RaiseByValue(tag, speed, height)";
	Floor_RaiseByValueTimes8 = "Floor_RaiseByValueTimes8(tag, speed, height)";
	Floor_RaiseByValueTxTy = "Floor_RaiseByValueTxTy(tag, speed, height)";
	Floor_RaiseInstant = "Floor_RaiseInstant(tag, arg1, height)";
	Floor_RaiseToHighest = "Floor_RaiseToHighest(tag, speed)";
	Floor_RaiseToLowestCeiling = "Floor_RaiseToLowestCeiling(tag, speed)";
	Floor_RaiseToNearest = "Floor_RaiseToNearest(tag, speed)";
	Floor_TransferNumeric = "Floor_TransferNumeric(tag)";
	Floor_TransferTrigger = "Floor_TransferTrigger(tag)";
	Floor_Waggle = "Floor_Waggle(tag, amp, freq, offset, time)";
	FloorAndCeiling_LowerByValue = "FloorAndCeiling_LowerByValue(tag, speed, height)";
	FloorAndCeiling_LowerRaise = "FloorAndCeiling_LowerRaise(tag, fspeed, cspeed)";
	FloorAndCeiling_RaiseByValue = "FloorAndCeiling_RaiseByValue(tag, speed, height)";
	For = "For(initialization, condition, iteration)";
	Function = "Function Void expression (Void)";
	GameSkill = "GameSkill()";
	GameType = "GameType()";
	Generic_Ceiling = "Generic_Ceiling(tag, speed, height, target, flag)";
	Generic_Crusher = "Generic_Crusher(tag, dspeed, uspeed, silent, crush)";
	Generic_Door = "Generic_Door(tag, speed, kind, delay, lock)";
	Generic_Floor = "Generic_Floor(tag, speed, height, target, flags)";
	Generic_Lift = "Generic_Lift(tag, speed, delay, type, height)";
	Generic_Stairs = "Generic_Stairs(tag, speed, height, flags, reset)";
	GetActorAngle = "GetActorAngle(tid)";
	GetActorProperty = "GetActorProperty(tid, property)";
	GetAmmoCapacity = "GetAmmoCapacity(typename)";
	GetActorFloorZ = "GetActorFloorZ(tid)";	
	GetActorX = "GetActorX(tid)";
	GetActorY = "GetActorY(tid)";
	GetActorZ = "GetActorZ(tid)";
	GetCVar = "GetCVar(name)";
	GetLevelInfo = "GetLevelInfo(levelinfo)";
	GetLineRowOffset = "GetLineRowOffset()";
	GetScreenHeight = "GetScreenHeight()";
	GetScreenWidth = "GetScreenWidth()";
	GetSectorCeilingZ = "GetSectorCeilingZ(tag, x, y)";
	GetSectorFloorZ = "GetSectorFloorZ(tag, x, y)";
	GiveInventory = "GiveInventory(type, amount)";
	HealThing = "HealThing(amount)";
	HudMessage = "HudMessage(text; type, id, color, x, y, holdtime)";
	HudMessageBold = "HudMessageBold(text; type, id, color, x, y, holdtime)";
	If = "If(expression)";
	int = "int expression";
	Light_ChangeToValue = "Light_ChangeToValue(tag, value)";
	Light_Fade = "Light_Fade(tag, value, tics)";
	Light_Flicker = "Light_Flicker(tag, upper, lower)";
	Light_ForceLightning = "Light_ForceLightning()";
	Light_Glow = "Light_Glow(tag, upper, lower, tics)";
	Light_LowerByValue = "Light_LowerByValue(tag, value)";
	Light_MaxNeighbor = "Light_MaxNeighbor(tag)";
	Light_MinNeighbor = "Light_MinNeighbor(tag)";
	Light_RaiseByValue = "Light_RaiseByValue(tag, value)";
	Light_Stop = "Light_Stop(tag)";
	Light_Strobe = "Light_Strobe(tag, upper, lower, u-tics, l-tics)";
	Light_StrobeDoom = "Light_StrobeDoom(tag, u-tics, l-tics)";
	Line_AlignCeiling = "Line_AlignCeiling(lineid, side)";
	Line_AlignFloor = "Line_AlignFloor(lineid, side)";
	LineSide = "LineSide()";
	LocalAmbientSound = "LocalAmbientSound(name, volume)";
	LocalSetMusic = "LocalSetMusic(song, pattern, transition)";
	NoiseAlert = "NoiseAlert(target, emitter)";
	Open = "Script expression Open";
	Pillar_Build = "Pillar_Build(tag, speed, height)";
	Pillar_BuildAndCrush = "Pillar_BuildAndCrush(tag, speed, height, crush)";
	Pillar_Open = "Pillar_Open(tag, speed, fdist, cdist)";
	Plat_DownByValue = "Plat_DownByValue(tag, speed, delay, height)";
	Plat_DownWaitUpStay = "Plat_DownWaitUpStay(tag, speed, delay)";
	Plat_DownWaitUpStayLip = "Plat_DownWaitUpStayLip(tag, speed, delay, lip)";
	Plat_PerpetualRaise = "Plat_PerpetualRaise(tag, speed, delay)";
	Plat_PerpetualRaiseLip = "Plat_PerpetualRaiseLip(tag, speed, delay, lip)";
	Plat_RaiseAndStayTx0 = "Plat_RaiseAndStayTx0(tag, speed)";
	Plat_Stop = "Plat_Stop(tag)";
	Plat_ToggleCeiling = "Plat_ToggleCeiling(tag)";
	Plat_UpByValue = "Plat_UpByValue(tag, speed, delay, height)";
	Plat_UpByValueStayTx = "Plat_UpByValueStayTx(tag, speed, height)";
	Plat_UpNearestWaitDownStay = "Plat_UpNearestWaitDownStay(tag, speed, delay)";
	Plat_UpWaitDownStay = "Plat_UpWaitDownStay(tag, speed, delay)";
	Player_GiveItem = "Player_GiveItem(item, message)";
	Player_RemoveItem = "Player_RemoveItem(item, message)";
	Player_SetTeam = "Player_SetTeam(team)";
	PlayerCount = "PlayerCount()";
	PlayerInGame = "PlayerInGame(playernum)";
	PlayerIsBot = "PlayerIsBot(playernum)";
	PlayerNumber = "PlayerNumber()";
	PlayMovie = "PlayMovie(moviename)";
	Polyobj_DoorSlide = "Polyobj_DoorSlide(po, speed, angle, dist, delay)";
	Polyobj_DoorSwing = "Polyobj_DoorSwing(po, speed, angle, delay)";
	Polyobj_Move = "Polyobj_Move(po, speed, angle, dist)";
	Polyobj_MoveTimes8 = "Polyobj_MoveTimes8(po, speed, angle, dist)";
	Polyobj_OR_Move = "Polyobj_OR_Move(po, speed, angle, distance)";
	Polyobj_OR_MoveTimes8 = "Polyobj_OR_MoveTimes8(po, speed, angle, distance)";
	Polyobj_OR_RotateLeft = "Polyobj_OR_RotateLeft(po, speed)";
	Polyobj_OR_RotateRight = "Polyobj_OR_RotateRight(po, speed, angle)";
	Polyobj_RotateLeft = "Polyobj_RotateLeft(po, speed, angle)";
	Polyobj_RotateRight = "Polyobj_RotateRight(po, speed, angle)";
	PolyWait = "PolyWait(po)";
	Print = "Print(type:expression)";
	PrintBold = "PrintBold(type:expression)";
	Radius_Quake = "Radius_Quake(intensity, duration, damrad, tremrad, tid)";
	Random = "Random(low, high)";
	Restart = "Restart";
	Script = "Script expression (Void)";
	ScriptWait = "ScriptWait(scriptid)";
	Scroll_Ceiling = "Scroll_Ceiling(tag, scrollbits, 0, xmove, ymove)";
	Scroll_Floor = "Scroll_Floor(tag, scrollbits, method xmove, ymove)";
	Scroll_Texture_Both = "Scroll_Texture_Both(lineid, left, right, down, up)";
	Sector_ChangeSound = "Sector_ChangeSound(tag, newsequence)";
	Sector_SetCeilingPanning = "Sector_SetCeilingPanning(tag, u-int, u-frac, v-int, v-frac)";
	Sector_SetCeilingScale = "Sector_SetCeilingScale(tag, u-int, u-frac, v-int, v-frac)";
	Sector_SetColor = "Sector_SetColor(tag, r, g, b)";
	Sector_SetDamage = "Sector_SetDamage(tag, amount, mod)";
	Sector_SetFade = "Sector_SetFade(tag, r, g, b)";
	Sector_SetFloorPanning = "Sector_SetFloorPanning(tag, u-int, u-frac, v-int, v-frac)";
	Sector_SetFloorScale = "Sector_SetFloorScale(tag, u-int, u-frac, v-int, v-frac)";
	Sector_SetFriction = "Sector_SetFriction(tag, amount)";
	Sector_SetGravity = "Sector_SetGravity(tag, ipart, fpart)";
	Sector_SetRotation = "Sector_SetRotation(tag, floor-angle, ceiling-angle)";
	SectorSound = "SectorSound(name, volume)";
	SetActorProperty = "SetActorProperty(tid, property, value)";
	SetAirControl = "SetAirControl(amount)";
	SetAmmoCapacity = "SetAmmoCapacity(typename, maxamount)";
	SetCameraToTexture = "SetCameraToTexture(tid, texture, fov)";
	SetCeilingTrigger = "SetCeilingTrigger(tag, height, special, arg1, arg2, arg3, arg4, arg5)";
	SetFloorTrigger = "SetFloorTrigger(tag, height, special, arg1, arg2, arg3, arg4, arg5)";
	SetFont = "SetFont(fontname)";
	SetGravity = "SetGravity(amount)";
	SetHudSize = "SetHudSize(width, height, statusbar)";
	SetLineBlocking = "SetLineBlocking(line, blocking)";
	SetLineMonsterBlocking = "SetLineMonsterBlocking(line, blocking)";
	SetLineSpecial = "SetLineSpecial(line, special, arg1, arg2, arg3, arg4, arg5)";
	SetLineTexture = "SetLineTexture(line, side, position, texture)";
	SetMarineSprite = "SetMarineSprite(tid, actorclass)";
	SetMarineWeapon = "SetMarineWeapon(tid, weapon)";
	SetMusic = "SetMusic(song, pattern, transition)";
	SetPlayerProperty = "SetPlayerProperty(who, set, which)";
	SetResultValue = "SetResultValue(value)";
	SetThingSpecial = "SetThingSpecial(tid, special, arg1, arg2, arg3, arg4, arg5)";
	SetWeapon = "SetWeapon(weaponname)";
	sin = "sin(angle)";
	SoundSequence = "SoundSequence(name)";
	Spawn = "Spawn(type, x, y, z, thingid, angle)";
	SpawnSpot = "SpawnSpot(type, spotid, thingid, angle)";
	Special = "Special";
	Stairs_BuildDown = "Stairs_BuildDown(tag, speed, height, delay, reset)";
	Stairs_BuildDownSync = "Stairs_BuildDownSync(tag, speed, height, reset)";
	Stairs_BuildUp = "Stairs_BuildUp(tag, speed, height, delay, reset)";
	Stairs_BuildUpDoom = "Stairs_BuildUpDoom(tag, speed, height, delay, reset)";
	Stairs_BuildUpSync = "Stairs_BuildUpSync(tag, speed, height, reset)";
	str = "str expression";
	strlen = "strlen(string)";
	Suspend = "Suspend";
	Switch = "Switch(expression)";
	TagWait = "TagWait(tag)";
	TakeInventory = "TakeInventory(type, amount)";
	Team_Score = "Team_Score(amount, nogrin)";
	Teleport = "Teleport(tid)";
	Teleport_EndGame = "Teleport_EndGame()";
	Teleport_Line = "Teleport_Line(thisid, destid, flip)";
	Teleport_NewMap = "Teleport_NewMap(map, pos)";
	Teleport_NoFog = "Teleport_NoFog(tid)";
	TeleportGroup = "TeleportGroup(groupid, sourceid, destinationid, movesource, fog)";
	TeleportInSector = "TeleportInSector(tag, sourceid, destinationid, fog, groupid)";
	TeleportOther = "TeleportOther(tid, destinationid, fog)";
	Teleport_ZombieChanger = "Teleport_ZombieChanger(tid, tag)";
	Terminate = "Terminate";
	Thing_Activate = "Thing_Activate(tid)";
	Thing_ChangeTID = "Thing_ChangeTID(oldtid, newtid)";
	Thing_Damage = "Thing_Damage(tid, amount, mod)";
	Thing_Deactivate = "Thing_Deactivate(tid)";
	Thing_Destroy = "Thing_Destroy(tid, extreme)";
	Thing_Hate = "Thing_Hate(hater, hatee, type)";
	Thing_Move = "Thing_Move(tid, destid)";
	Thing_Projectile = "Thing_Projectile(tid, type, angle, speed, vspeed)";
	Thing_Projectile2 = "Thing_Projectile2(tid, type, angle, speed, vspeed, gravity, newtid)";
	Thing_ProjectileAimed = "Thing_ProjectileAimed(tid, type, speed, target, newtid)";
	Thing_ProjectileGravity = "Thing_ProjectileGravity(tid, type, angle, speed, vspeed)";
	Thing_ProjectileIntercept = "Thing_ProjectileIntercept(tid, type, speed, target, newtid)";
	Thing_Remove = "Thing_Remove(tid)";
	Thing_SetFrame = "Thing_SetFrame(tid, frame)";
	Thing_SetGoal = "Thing_SetGoal(tid, goal, delay)";
	Thing_SetSpecial = "Thing_SetSpecial(tid, special, arg1, arg2, arg3)";
	Thing_SetTranslation = "Thing_SetTranslation(tid, translation)";
	Thing_Spawn = "Thing_Spawn(tid, type, angle, newtid)";
	Thing_SpawnFacing = "Thing_SpawnFacing(tid, type, nofog, newtid)";
	Thing_SpawnNoFog = "Thing_SpawnNoFog(tid, type, angle, newtid)";
	ThingCount = "ThingCount(type, id)";
	ThingSound = "ThingSound(thingid, name, volume)";
	ThrustThing = "ThrustThing(angle, force)";
	ThrustThingZ = "ThrustThingZ(tid, speed, upordown, addorset)";
	Timer = "Timer()";
	TranslucentLine = "TranslucentLine(lineid, amount, additive)";
	Until = "Until(expression)";
	UsePuzzleItem = "UsePuzzleItem(item, script)";
	VectorAngle = "VectorAngle(x, y)";
	Void = "Void";
	While = "While(expression)";
	World = "World Int expression:identifier";
}

constants
{
	TRUE;
	FALSE;
	ON;
	OFF;
	YES;
	NO;
	LINE_FRONT;
	LINE_BACK;
	SIDE_FRONT;
	SIDE_BACK;
	TEXTURE_TOP;
	TEXTURE_MIDDLE;
	TEXTURE_BOTTOM;
	GAME_SINGLE_PLAYER;
	GAME_NET_COOPERATIVE;
	GAME_NET_DEATHMATCH;
	GAME_NET_TEAMGAME;
	TEAM_BLUE;
	TEAM_RED;
	CLASS_FIGHTER;
	CLASS_CLERIC;
	CLASS_MAGE;
	SKILL_VERY_EASY;
	SKILL_EASY;
	SKILL_NORMAL;
	SKILL_HARD;
	SKILL_VERY_HARD;
	BLOCK_NOTHING;
	BLOCK_CREATURES;
	BLOCK_EVERYTHING;
	SCROLL;
	CARRY;
	SCROLL_AND_CARRY;
	MOD_UNKNOWN;
	MOD_FIST;
	MOD_PISTOL;
	MOD_SHOTGUN;
	MOD_CHAINGUN;
	MOD_ROCKET;
	MOD_R_SPLASH;
	MOD_PLASMARIFLE;
	MOD_BFG_BOOM;
	MOD_BFG_SPLASH;
	MOD_CHAINSAW;
	MOD_SSHOTGUN;
	MOD_WATER;
	MOD_SLIME;
	MOD_LAVA;
	MOD_CRUSH;
	MOD_TELEFRAG;
	MOD_FALLING;
	MOD_SUICIDE;
	MOD_BARREL;
	MOD_EXIT;
	MOD_SPLASH;
	MOD_HIT;
	MOVIE_Played;
	MOVIE_Played_NoVideo;
	MOVIE_Played_Aborted;
	MOVIE_Failed;
	PROP_FROZEN;
	PROP_NOTARGET;
	PROP_INSTANTWEAPONSWITCH;
	PROP_FLY;
	PROP_TOTALLYFROZEN;
	CR_UNTRANSLATED;
	CR_BRICK;
	CR_TAN;
	CR_GRAY;
	CR_GREY;
	CR_GREEN;
	CR_BROWN;
	CR_GOLD;
	CR_RED;
	CR_BLUE;
	CR_ORANGE;
	CR_WHITE;
	CR_YELLOW;
	HUDMSG_PLAIN;
	HUDMSG_FADEOUT;
	HUDMSG_TYPEON;
	HUDMSG_LOG0x80000;
	MARINEWEAPON_Dummy;
	MARINEWEAPON_Fist;
	MARINEWEAPON_BerserkFis;
	MARINEWEAPON_Chainsaw;
	MARINEWEAPON_Pistol;
	MARINEWEAPON_Shotgun;
	MARINEWEAPON_SuperShotgu;
	MARINEWEAPON_Chaingun;
	MARINEWEAPON_RocketLaunche;
	MARINEWEAPON_PlasmaRifl;
	MARINEWEAPON_Railgun;
	MARINEWEAPON_BFG;
	APROP_Health;
	APROP_Speed;
	APROP_Damage;
	APROP_Alpha;
	APROP_RenderStyl;
	APROP_Ambush;
	APROP_Invulnerable;
	APROP_SeeSound;
	APROP_AttackSoun;
	APROP_PainSound;
	APROP_DeathSoun;
	APROP_ActiveSoun;
	STYLE_None;
	STYLE_Normal;
	STYLE_Fuzzy;
	STYLE_SoulTrans;
	STYLE_OptFuzzy;
	STYLE_Translucen;
	STYLE_Add;
	T_ROCK1;
	T_ROCK2;
	T_ROCK3;
	T_DIRT1;
	T_DIRT2;
	T_DIRT3;
	T_DIRT4;
	T_DIRT5;
	T_DIRT6;
	T_STAINEDGLASS1;
	T_STAINEDGLASS2;
	T_STAINEDGLASS3;
	T_STAINEDGLASS4;
	T_STAINEDGLASS5;
	T_STAINEDGLASS6;
	T_STAINEDGLASS7;
	T_STAINEDGLASS8;
	T_STAINEDGLASS9;
	T_STAINEDGLASS0;
	T_NONE;
	T_SHOTGUY;
	T_CHAINGUY;
	T_BARON;
	T_ZOMBIE;
	T_IMP;
	T_ARACHNOTRON;
	T_SPIDERMASTERMIND;
	T_DEMON;
	T_SPECTRE;
	T_IMPFIREBALL;
	T_CLIP;
	T_SHELLS;
	T_CACODEMON;
	T_REVENANT;
	T_BRIDGE;
	T_ARMORBONUS;
	T_STIMPACK;
	T_MEDKIT;
	T_SOULSPHERE;
	T_SHOTGUN;
	T_CHAINGUN;
	T_ROCKETLAUNCHER;
	T_PLASMAGUN;
	T_BFG;
	T_CHAINSAW;
	T_SUPERSHOTGUN;
	T_PLASMABOLT;
	T_TRACER;
	T_GREENARMOR;
	T_BLUEARMOR;
	T_CELL;
	T_BLUEKEYCARD;
	T_REDKEYCARD;
	T_YELLOWKEYCARD;
	T_YELLOWSKULLKEY;
	T_REDSKULLKEY;
	T_BLUESKULLKEY;
	T_TEMPLARGEFLAME;
	T_STEALTHBARON;
	T_STEALTHKNIGHT;
	T_STEALTHZOMBIE;
	T_STEALTHSHOTGUY;
	T_LOSTSOUL;
	T_VILE;
	T_MANCUBUS;
	T_HELLKNIGHT;
	T_CYBERDEMON;
	T_PAINELEMENTAL;
	T_WOLFSS;
	T_STEALTHARACHNOTRON;
	T_STEALTHVILE;
	T_STEALTHCACODEMON;
	T_STEALTHCHAINGUY;
	T_STEALTHSERGEANT;
	T_STEALTHIMP;
	T_STEALTHMANCUBUS;
	T_STEALTHREVENANT;
	T_BARREL;
	T_CACODEMONSHOT;
	T_ROCKET;
	T_BFGSHOT;
	T_ARACHNOTRONPLASMA;
	T_BLOOD;
	T_PUFF;
	T_MEGASPHERE;
	T_INVULNERABILITY;
	T_BERSERK;
	T_INVISIBILITY;
	T_IRONFEET;
	T_COMPUTERMAP;
	T_LIGHTAMP;
	T_AMMOBOX;
	T_ROCKETAMMO;
	T_ROCKETBOX;
	T_BATTERY;
	T_SHELLBOX;
	T_BACKPACK;
	T_GUTS;
	T_BLOODPOOL;
	T_BLOODPOOL1;
	T_BLOODPOOL2;
	T_FLAMINGBARREL;
	T_BRAINS;
	T_SCRIPTEDMARINE;
	T_HEALTHBONUS;
	T_MANCUBUSSHOT;
	T_BARONBALL;
	T_GRENADE;
	T_DARKIMP;
	T_BLOODDEMON;
	T_SSGGUY;
	T_HECTEBUS;
	T_CACOLANTERN;
	T_BELPHEGOR;
	T_SAUSAGEHEAD;
	T_SAUSAGESPITTER;
	T_PISTOL;
	T_GRENADELAUNCHER;
	T_RAILGUN;
	T_BFG10000;
	T_MINIGUN;
	T_MAXHEALTHBONUS;
	T_MASARMORBONUS;
	T_REDARMOR;
	T_TURBOSPHERE;
	T_ANTIGRAVBELT;
	T_TIMEFREEZER;
	T_INFRAGOGGLES;
	T_INFRATRACKER;
	T_TRANSLUCENCY;
	T_DOOMSPHERE;
	T_RANDOMPOWERUP;
	T_BLUEFLAG;
	T_REDFLAG;
	T_WHITEFLAG;
	T_STRENGTH;
	T_RAGE;
	T_DRAIN;
	T_SPREAD;
	T_RESISTANCE;
	T_REGENERATION;
	T_PROSPERITY;
	T_REFLECTION;
	T_HIGHJUMP;
	T_HASTE;
	T_DEADCYBERDEMON;
	T_BOBBINGSKULLINFLAMES;
	T_IMPALINGSPIKE;
	T_IMPALINGSPIKECGUN;
	T_IMPALINGSPIKEZOMB;
	T_IMPSTATUE;
	T_DEMONSTATUE;
	T_ARCHSTATUE;
	T_BARONSTATUE;
	T_CYBERDEMONSTATUE;
	T_MASSMOUTHSTATUE;
	T_GREYSTALAGMITE;
	T_SHORTGREYPILLAR;
	T_TALLGREYPILLAR;
	T_GREYPILLARHEART;
	T_TALLGOTHICPILLAR;
	T_REVENANTHAND;
	T_IMPHEAD;
	T_HISSY;
	T_HELLPILLAR;
	T_GOTHICPILLAR;
	T_STARBASEPILLAR;
	T_MILITARYPILLAR;
	T_LABORTORYPILLAR;
	T_CLINK;
	T_MUMMYLEADER;
	T_BEAST;
	T_MUMMY;
	T_KNIGHT;
	T_IMPLEADER;
	T_MUMMYGHOST;
	T_MUMMYLEADERGHOST;
	T_WIMPYWANDAMMO;
	T_HEFTYWANDAMMO;
	T_ITEMEGG;
	T_ITEMFLIGHT;
	T_ITEMTELEPORT;
	T_WIZARD;
	T_IRONLICH;
	T_ITEMHEALTHPOTION;
	T_ITEMHEALTHFLASH;
	T_ITEMHEALTHFULL;
	T_CROSSBOW;
	T_BLASTER;
	T_PHOENIXROD;
	T_SKULLROD;
	T_MACE;
	T_GAUNTLETS;
	T_WIMPYCROSSBOWAMMO;
	T_HEFTYCROSSBOWAMMO;
	T_WIMPYMACEAMMO;
	T_HEFTYMACEAMMO;
	T_WIMPYBLASTERAMMO;
	T_HEFTYBLASTERAMMO;
	T_MORPHBLAST;
	T_SHIELD1;
	T_SHIELD2;
	T_ITEMTIMEBOMB;
	T_ITEMTORCH;
	T_BLUEKEY;
	T_GREENKEY;
	T_YELLOWKEY;
	T_SOUND_WIND;
	T_SOUND_WATERFALL;
	T_BEASTBALL;
	T_FEATHER;
	T_CHICKEN;
	T_VOLCANOBALL;
	T_TINYVOLCANOBALL;
	T_POD;
	T_PODGENERATOR;
	T_KNIGHTAXE;
	T_KNIGHTBLOODAXE;
	T_KNIGHTGHOST;
	T_MUMMYHEAD;
	T_SNAKE;
	T_ITEMINVULNERABILITY;
	T_ITEMTOME;
	T_ITEMINVISIBILITY;
	T_ITEMBAGOFHOLDING;
	T_ITEMALLMAP;
	T_SNAKEPROJECTILE;
	T_SNAKEPROJECTILEBIG;
	T_WIZARDSHOT;
	T_DSPARILTELEPORTDEST;
	T_DSPARILONSERPENT;
	T_DSPARILALONE;
	T_SERPENTFIREBALL;
	T_DSPARILBLUESHOT;
	T_DSPARILWIZARDSPAWNER;
	T_CROSSBOWMAINBLAST;
	T_CROSSBOWMINIBLAST;
	T_CROSSBOWPOWERBLAST;
	T_VOLCANO;
	T_POWERWANDMINIBLAST;
	T_POWERWANDBIGGERBLAST;
	T_DEATHBALL;
	T_NOGRAVITYMACEBALL;
	T_BOUNCYMACEBALL;
	T_HEAVYMACEBALL;
	T_RIPPER;
	T_WIMPYSKULLRODAMMO;
	T_HEFTYSKULLRODAMMO;
	T_SKULLRODBLAST;
	T_WIMPYPHOENIXRODAMMO;
	T_HEFTYPHOENIXRODAMMO;
	T_PHOENIXSHOT;
	T_IRONLICHBLUESHOT;
	T_WHIRLWIND;
	T_REDTELEGLITTER;
	T_BLUETELEGLITTER;
}
